
 * This action will read from Cloud Object Storage.  If the Cloud Object Storage
 * service is not bound to this action or to the package containing this action,
 * then you must provide the service information as argument input to this function.
 * Cloud Functions actions accept a single parameter, which must be a JSON object.
 *
 * In this case, the args variable will look like:
 *   {
 *     "bucket": "your COS bucket name",
 *     "key": "Name of the object to read"
 *   }
 */
const CloudObjectStorage = require('ibm-cos-sdk');
const ElasticSearch = require('elasticsearch');
const request = require("request");


async function main(args) {
  const { cos, params } = getParamsCOS(args, CloudObjectStorage);

  let response;
  const result = params;
  try {
    response = await cos.getObject({ Bucket: params.bucket, Key: params.key }).promise();
  } catch (err) {
    console.log(err);
    result.message = err.message;
    throw result;
  }
  
  var encodedString = response.Body.toString('base64');
  sendToElasticSearch(params,encodedString);
  
  return result;
}


function getParamsCOS(args, COS) {
  const { bucket, key } = args;
  const endpoint = args.endpoint || 's3-api.us-geo.objectstorage.softlayer.net';
  const ibmAuthEndpoint = args.ibmAuthEndpoint || 'https://iam.ng.bluemix.net/oidc/token';
  const apiKeyId = args.apikey || args.apiKeyId || args.__bx_creds['cloud-object-storage'].apikey;
  const serviceInstanceId = args.resource_instance_id || args.serviceInstanceId || args.__bx_creds['cloud-object-storage'].resource_instance_id;

  const params = {};
  params.bucket = bucket;
  params.key = key;

  const cos = new COS.S3({
    endpoint, ibmAuthEndpoint, apiKeyId, serviceInstanceId,
  });
  return { cos, params };
}

function sendToElasticSearch(params, encodedString) {
    		const config = {
			url: '<ES_URL_ENDPOINT>',
		};
		
		let url = `${config.url}/index/_doc/${params.key}?pipeline=attachment`;

		var requestData = `{ "data": "${encodedString}" }`;
		
		request(url,
		    {
		        method: 'PUT',
		        headers: {'Content-Type': 'application/json'},
		        body: requestData

		    }, function(error, response, body) {
                 if (!error && response.statusCode === 200 || response.statusCode === 201) {
                    console.log("response.statusCode: " + response.statusCode);
                    console.log(body);
                 } else {
                     console.log("response.statusCode: " + response.statusCode);
                 }
		    }
		);
}}